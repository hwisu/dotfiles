#!/bin/zsh

# Ensure ~/.env.json exists
if [ ! -f "$HOME/.env.json" ]; then
  mkdir -p "$HOME"
  cat > "$HOME/.env.json" <<EOF
{
  "variables": {
    "DENO_INSTALL": "$HOME/.deno",
    "PNPM_HOME": "$HOME/Library/pnpm"
  },
  "paths_to_add": [
    "$DENO_INSTALL/bin",
    "$PNPM_HOME"
  ]
}
EOF
  echo "Created $HOME/.env.json"
fi

# Ensure .gen_envs.sh is in $HOME and executable
if [ ! -f "$HOME/.gen_envs.sh" ]; then
  cp "$(dirname "$0")/.gen_envs.sh" "$HOME/.gen_envs.sh"
  chmod +x "$HOME/.gen_envs.sh"
  echo "Copied and set executable: $HOME/.gen_envs.sh"
fi

# Ensure .gen_envs.fish is in $HOME and executable
if [ ! -f "$HOME/.gen_envs.fish" ]; then
  cp "$(dirname "$0")/.gen_envs.fish" "$HOME/.gen_envs.fish"
  chmod +x "$HOME/.gen_envs.fish"
  echo "Copied and set executable: $HOME/.gen_envs.fish"
fi

# Install Homebrew if not already installed
if ! command -v brew &> /dev/null; then
    echo "Homebrew not found. Installing Homebrew..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    # Add Homebrew to PATH for the current session after installation
    # This might need adjustments based on Homebrew's post-install instructions
    if [ -d "/opt/homebrew/bin" ]; then
        export PATH="/opt/homebrew/bin:$PATH"
        echo "Added /opt/homebrew/bin to PATH for the current session."
    fi
else
    echo "Homebrew is already installed."
    # Ensure Homebrew is in PATH if already installed but not sourced in current shell
    if [ -d "/opt/homebrew/bin" ] && [[ ":$PATH:" != *":/opt/homebrew/bin:"* ]]; then
         export PATH="/opt/homebrew/bin:$PATH"
         echo "Ensured /opt/homebrew/bin is in PATH for the current session."
    fi
fi

# Install shell dependency: fish using Homebrew
echo "Installing shell dependency: fish nu"
brew install fish nu

# Install Deno if not already installed
if ! command -v deno &> /dev/null; then
    echo "Deno not found. Installing Deno..."
    curl -fsSL https://deno.land/install.sh | sh
else
    echo "Deno is already installed."
fi

# Source .gen_envs.sh in shell configuration files
GEN_ENVS_SOURCE_LINE="source $HOME/.gen_envs.sh"

# For Bash (~/.bashrc)
BASHRC="$HOME/.bashrc"
if [ -f "$BASHRC" ]; then
    if ! grep -q "$GEN_ENVS_SOURCE_LINE" "$BASHRC"; then
        echo "\n# Source environment variables generated by .gen_envs.sh" >> "$BASHRC"
        echo "$GEN_ENVS_SOURCE_LINE" >> "$BASHRC"
        echo "Added source line to $BASHRC."
    else
        echo "Source line already exists in $BASHRC."
    fi
else
    echo "# Source environment variables generated by .gen_envs.sh" > "$BASHRC"
    echo "$GEN_ENVS_SOURCE_LINE" >> "$BASHRC"
    echo "Created $BASHRC and added source line."
fi

# For Zsh (~/.zshrc)
ZSHRC="$HOME/.zshrc"
if [ -f "$ZSHRC" ]; then
    if ! grep -q "$GEN_ENVS_SOURCE_LINE" "$ZSHRC"; then
        echo "\n# Source environment variables generated by .gen_envs.sh" >> "$ZSHRC"
        echo "$GEN_ENVS_SOURCE_LINE" >> "$ZSHRC"
        echo "Added source line to $ZSHRC."
    else
        echo "Source line already exists in $ZSHRC."
    fi
else
    echo "# Source environment variables generated by .gen_envs.sh" > "$ZSHRC"
    echo "$GEN_ENVS_SOURCE_LINE" >> "$ZSHRC"
    echo "Created $ZSHRC and added source line."
fi

# For Fish (~/.config/fish/config.fish)
FISH_CONFIG_DIR="$HOME/.config/fish"
FISH_CONFIG_FILE="$FISH_CONFIG_DIR/config.fish"
FISH_SOURCE_LINE="source $HOME/.gen_envs.fish"

mkdir -p "$FISH_CONFIG_DIR"

if [ -f "$FISH_CONFIG_FILE" ]; then
    if ! grep -q "$FISH_SOURCE_LINE" "$FISH_CONFIG_FILE"; then
        echo "\n# Source environment variables generated by .gen_envs.fish" >> "$FISH_CONFIG_FILE"
        echo "$FISH_SOURCE_LINE" >> "$FISH_CONFIG_FILE"
        echo "Added source line to $FISH_CONFIG_FILE."
    else
        echo "Source line already exists in $FISH_CONFIG_FILE."
    fi
else
    echo "# Source environment variables generated by .gen_envs.fish" > "$FISH_CONFIG_FILE"
    echo "$FISH_SOURCE_LINE" >> "$FISH_CONFIG_FILE"
    echo "Created $FISH_CONFIG_FILE and added source line."
fi

# Run Deno TypeScript bootstrap scripts
if command -v deno &> /dev/null; then
    echo "Running Deno bootstrap_brew.ts..."
    deno run -A $(dirname "$0")/bootstrap_brew.ts || { echo "bootstrap_brew.ts failed"; exit 1; }
    echo "Running Deno gitset.ts..."
    deno run -A $(dirname "$0")/gitset.ts || { echo "gitset.ts failed"; exit 1; }
else
    echo "Deno is not installed. Skipping Deno scripts."
fi
